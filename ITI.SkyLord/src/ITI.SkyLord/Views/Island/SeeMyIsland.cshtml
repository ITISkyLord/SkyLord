@addTagHelper "*, Microsoft.AspNet.Mvc.TagHelpers"

@model ITI.SkyLord.ViewModel.SeeIslands.SeeMyIslandViewModel

@using System.Collections.Generic
@using ITI.SkyLord
@using ITI.SkyLord.ViewModel.Partial
@using ITI.SkyLord.Models.Entity_Framework.Entites.Events
@using ITI.SkyLord.Services

@{
    ViewData["Title"] = "View My Island";
    Layout = "_Layout";
    Model.CurrentIsland = Model.CurrentIsland;
}

<div class="MainContentSeeMyIsland">
    <div class="row">
        <div id="Test">
            <div id="SeeMyIsland">
                @for( var i = 1; i != 11; i++ )
                {
                    Building myBuilding;
                    string name;

                    @if( Model.DicoBuildings.TryGetValue( i.ToString(), out myBuilding ) )
                    {
                        name = myBuilding.BuildingName.ToString();
                    }
                    else
                    {
                        name = "empty";
                    }

                    <div class="Building" buildingname="@name" id="place_@i" templateid="@i">
                        @{
                            if( myBuilding != null )
                            {
                                switch( myBuilding.BuildingName )
                                {
                                    case BuildingName.woodField:
                                    case BuildingName.academy:
                                    case BuildingName.barrack:
                                        name += ".png";
                                        break;

                                    default:
                                        name += ".gif";
                                        break;
                                }
                            }
                        }
                        <img src="~/images/SeeMyIsland/@name" alt="" onerror='this.style.display = "none"'/>
                    </div>
            }
            </div>
        </div>



        <div id="UI">
            <div id="degage">
                @if( Model.MovementTowardThisIsland.Count > 0 )
                {

                    <h4>Attaque vers l'île.</h4>
                    @foreach( ArmyEvent ae in Model.MovementTowardThisIsland )
                    {
                        if( ae.ArmyMovement == ArmyMovement.attacking )
                        {
                            <div>Nous sommes en danger, une attaque arrive depuis l'île <a asp-controller="Island" asp-action="SeeOtherIsland" asp-route-islandIdOfOtherPlayer="@ae.Island.Owner.PlayerId" asp-route-islandId="@Model.Layout.IslandId"> @ae.Island.Name [@ae.Island.Coordinates.X, @ae.Island.Coordinates.Y]</a> qui appartient à <a asp-controller="Profil" asp-action="ProfilOfOtherPlayer" asp-route-otherPlayerId=@ae.Island.Owner.PlayerId asp-route-islandId=@Model.Layout.IslandId>@ae.Island.Owner.Name</a>. Impact à @ae.EndingDate.ToString( @"HH\hmm\mss\s" )</div>
                        }
                        else if( ae.ArmyMovement == ArmyMovement.sendingRessources )
                        {
                            <div>Hourra ! Des transporteurs alliés se dirigent vers notre île depuis <a asp-controller="Island" asp-action="SeeOtherIsland" asp-route-islandIdOfOtherPlayer="@ae.Island.Owner.PlayerId" asp-route-islandId="@Model.Layout.IslandId"> @ae.Island.Name [@ae.Island.Coordinates.X, @ae.Island.Coordinates.Y]</a>. Ils transportent avec eux @ae.PillagedRessources.Wood bois, @ae.PillagedRessources.Metal métal, @ae.PillagedRessources.Cristal cristal et @ae.PillagedRessources.Magic magie. Impact à @ae.EndingDate.ToString( @"HH\hmm\mss\s" )</div>
                        }
                        else if( ae.ArmyMovement == ArmyMovement.moving )
                        {
                            <div>Des troupes alliés se dirigent vers notre île depuis <a asp-controller="Island" asp-action="SeeOtherIsland" asp-route-islandIdOfOtherPlayer="@ae.Island.Owner.PlayerId" asp-route-islandId="@Model.Layout.IslandId"> @ae.Island.Name [@ae.Island.Coordinates.X, @ae.Island.Coordinates.Y]</a>. Impact à @ae.EndingDate.ToString( @"HH\hmm\mss\s" ) </div>
                        }
                    }
                }
                @if( Model.MovementFromThisIsland.Count > 0 )
                {
                    <h2>Nos attaques</h2>
                    @foreach( ArmyEvent ae in Model.MovementFromThisIsland )
                    {
                        if( ae.Destination.Owner != null )
                        {
                            if( ae.ArmyMovement == ArmyMovement.attacking )
                            {
                                <div>Attaque vers <a asp-controller="Island" asp-action="SeeOtherIsland" asp-route-islandIdOfOtherPlayer="@ae.Destination.IslandId" asp-route-islandId="@Model.Layout.IslandId"> @ae.Destination.Name [@ae.Destination.Coordinates.X, @ae.Destination.Coordinates.Y]</a> chez <a asp-controller="Profil" asp-action="ProfilOfOtherPlayer" asp-route-otherPlayerId=@ae.Destination.Owner.PlayerId asp-route-islandId=@Model.Layout.IslandId>@ae.Destination.Owner.Name</a>. Impact à @ae.EndingDate.ToString( @"HH\hmm\mss\s" )</div>
                            }
                            else if( ae.ArmyMovement == ArmyMovement.sendingRessources )
                            {
                                <div>Envoi de ressources vers <a asp-controller="Island" asp-action="SeeOtherIsland" asp-route-islandIdOfOtherPlayer="@ae.Destination.IslandId" asp-route-islandId="@Model.Layout.IslandId"> @ae.Destination.Name [@ae.Destination.Coordinates.X, @ae.Destination.Coordinates.Y]</a> chez <a asp-controller="Profil" asp-action="ProfilOfOtherPlayer" asp-route-otherPlayerId=@ae.Island.Owner.PlayerId asp-route-islandId=@Model.Layout.IslandId>@ae.Island.Owner.Name</a>. Elles arriveront à @ae.EndingDate.ToString( @"HH\hmm\mss\s" )</div>
                            }
                            else if( ae.ArmyMovement == ArmyMovement.returning )
                            {
                                <div>Vos unités sont en train de revenir de <a asp-controller="Island" asp-action="SeeOtherIsland" asp-route-islandIdOfOtherPlayer="@ae.Destination.IslandId" asp-route-islandId="@Model.Layout.IslandId"> @ae.Destination.Name [@ae.Destination.Coordinates.X, @ae.Destination.Coordinates.Y]</a> chez <a asp-controller="Profil" asp-action="ProfilOfOtherPlayer" asp-route-otherPlayerId=@ae.Destination.Owner.PlayerId asp-route-islandId=@Model.Layout.IslandId>@ae.Destination.Owner.Name</a>. Elles arriveront à @ae.EndingDate.ToString( @"HH\hmm\mss\s" )</div>
                            }
                        }
                        else if( ae.ArmyMovement == ArmyMovement.attacking )
                        {
                            <div>Attaque vers une <a asp-controller="Island" asp-action="SeeOtherIsland" asp-route-islandIdOfOtherPlayer="ae.Destination.IslandId" asp-route-islandId="@Model.Layout.IslandId"> île sauvage [@ae.Destination.Coordinates.X, @ae.Destination.Coordinates.Y]</a>. Impact à @ae.EndingDate.ToString( @"HH\hmm\mss\s" )</div>
                        }
                        else if( ae.ArmyMovement == ArmyMovement.returning )
                        {
                            <div>Vos unités sont en train de revenir de <a asp-controller="Island" asp-action="SeeOtherIsland" asp-route-islandIdOfOtherPlayer="ae.Destination.IslandId" asp-route-islandId="@Model.Layout.IslandId"> @ae.Destination.Name [@ae.Destination.Coordinates.X, @ae.Destination.Coordinates.Y]</a>. Elles arriveront à @ae.EndingDate.ToString( @"HH\hmm\mss\s" )</div>

                        }
                        else if( ae.ArmyMovement == ArmyMovement.colonising )
                        {
                            <div>Colonisation vers une <a asp-controller="Island" asp-action="SeeOtherIsland" asp-route-islandIdOfOtherPlayer="ae.Destination.IslandId" asp-route-islandId="@Model.Layout.IslandId"> île sauvage [@ae.Destination.Coordinates.X, @ae.Destination.Coordinates.Y]</a>. Arrivée à @ae.EndingDate.ToString( @"HH\hmm\mss\s" )</div>
                        }

                    }
                    <br />
                }

                @if( Model.UnitsQueue.Count > 0 )
                {
                    <br />
                    <div>
                        <h4>Troupes en constructions</h4>

                        @foreach( UnitQueue queueElement in Model.UnitsQueue )
                        {
                            <div>Unité : @queueElement.Unit.Name</div>
                            <div>Nombre : @queueElement.Number <br /></div>

                            var dureeFin = queueElement.EndingDate - DateTime.Now;

                            <div class="time" hours="@dureeFin.Hours" minutes="@dureeFin.Minutes" secondes="@dureeFin.Seconds">Time</div>
                            <br />
                        }
                    </div>
                }

                <div>
                    <h4>Production</h4>

                    Bois : @Model.Production.Wood par heure<br />
                    Métal : @Model.Production.Metal par heure<br />
                    Cristal : @Model.Production.Cristal par heure<br />
                    Magie : @Model.Production.Magic par heure<br />

                </div>

                @if( Model.BuildingDeveloping != null )
                {
                    <br />
                    TimeSpan timetoEnd = Model.BuildingDeveloping.EndingDate - DateTime.Now;

                    <div>
                        @BuildingManager.StaticBuildingNameToName(Model.BuildingDeveloping.BuildingToBuild) est en construction et finira dans <span class="time" hours="@timetoEnd.Hours" minutes="@timetoEnd.Minutes" secondes="@timetoEnd.Seconds"> à @Model.BuildingDeveloping.EndingDate.ToString( @"HH\hmm\mss\s" ) </span> 
                    </div>
                }
                @if( Model.CurrentResearch != null )
                {
                    TimeSpan timetoEnd = Model.CurrentResearch.EndingDate - DateTime.Now;

                    <div>
                        @TechnologyManager.StaticTechnologyNameToName(Model.CurrentResearch.TechnologyName) est en recherche et finira dans <span class="time" hours="@timetoEnd.Hours" minutes="@timetoEnd.Minutes" secondes="@timetoEnd.Seconds"> à @Model.CurrentResearch.EndingDate.ToString( @"HH\hmm\mss\s" ) </span>
                    </div>
                }

            </div>
            @for( var i = 1; i != 11; i++ )
            {
                Building myBuilding;
                string name;

                @if( Model.DicoBuildings.TryGetValue( i.ToString(), out myBuilding ) )
                {
                    name = myBuilding.BuildingName.ToString();
                }
                else
                {
                    name = "empty";
                }



                <div class="templatebuilding" id="ui_@i" buildingname="@name" style="display:none;">
                    @{
                        // On cherche le next s'il existe
                        Level nextLevel = null;
                        Model.NextLevel.TryGetValue( i, out nextLevel );

                        // On cherche les buildings event s'ils existent
                        List<BuildingEvent> buildingEvent = new List<BuildingEvent>();
                        Model.AllBuildingEventOnIsland.TryGetValue( i, out buildingEvent );

                        bool isInConstruction = Model.AllBuildingEventOnIsland.Where(kvp => kvp.Value.Count != 0).Count() != 0;

                        // On balance le view model à notre partial
                        BuildingPartialViewModel partialModel = new BuildingPartialViewModel()
                        {
                            CurrentBuilding = myBuilding,
                            Position = i,
                            AvailableBuildings = Model.AvailableBuildings,
                            Layout = Model.Layout,
                            CurrentArmy = Model.DefenseArmy,
                            AvailableUnit = Model.AvailableUnit,
                            AllUnits = Model.AllUnits,
                            NextBuildingLevel = nextLevel,
                            EventsOnBuilding = buildingEvent,
                            TechnologyDisplays = Model.TechnologyDisplays,
                            TargetTechnology = Model.TargetTechnology,
                            TechnologyManager = Model.TechnologyManager,
                            UnitsQueue = Model.UnitsQueue,
                            IsInConstruction =  isInConstruction,
                            CurrentResearch = Model.CurrentResearch

                        };
                        Write( Html.Partial( "~/Views/Partial/" + name + ".cshtml", partialModel ) );
                    }
                </div>
                        }
        </div>

    </div>
</div>

<script src="~/js/seeIsland.js"></script>
